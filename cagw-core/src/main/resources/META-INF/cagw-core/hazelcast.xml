<?xml version="1.0" encoding="UTF-8"?>

<hazelcast
	xsi:schemaLocation="http://www.hazelcast.com/schema/config hazelcast-config-3.4.xsd"
	xmlns="http://www.hazelcast.com/schema/config" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
	<license-key>NEPGBID9OKM130R0Y51T5V3Q1X0000</license-key>
	<group>
		<name>dev</name>
		<password>dev-pass</password>
	</group>
	<management-center enabled="false">http://192.168.5.6:8080/mancenter</management-center>
	<network>
		<port auto-increment="true" port-count="100">5701</port>
		<interfaces enabled="true">
			<interface>192.168.5.6</interface>
			<interface>192.168.5.12</interface>
		</interfaces>
		<outbound-ports>
			<ports>0</ports>
		</outbound-ports>
		<join>
			<tcp-ip enabled="true">
				<interface>192.168.5.6</interface>
				<interface>192.168.5.12</interface>
			</tcp-ip>
		</join>
		<ssl enabled="false" />
		<socket-interceptor enabled="false" />
	</network>
	<partition-group enabled="true" />
	<executor-service name="default">
		<pool-size>16</pool-size>
		<!--Queue capacity. 0 means Integer.MAX_VALUE. -->
		<queue-capacity>0</queue-capacity>
	</executor-service>
	<queue name="default">
		<!-- Maximum size of the queue. When a JVM's local queue size reaches the 
			maximum, all put/offer operations will get blocked until the queue size of 
			the JVM goes down below the maximum. Any integer between 0 and Integer.MAX_VALUE. 
			0 means Integer.MAX_VALUE. Default is 0. -->
		<max-size>0</max-size>
		<!-- Number of backups. If 1 is set as the backup-count for example, then 
			all entries of the map will be copied to another JVM for fail-safety. 0 means 
			no backup. -->
		<backup-count>1</backup-count>

		<!-- Number of async backups. 0 means no backup. -->
		<async-backup-count>0</async-backup-count>

		<empty-queue-ttl>-1</empty-queue-ttl>
	</queue>
	<map name="default">
		<!-- Data type that will be used for storing recordMap. Possible values: 
			BINARY (default): keys and values will be stored as binary data OBJECT : 
			values will be stored in their object forms NATIVE : values will be stored 
			in non-heap region of JVM -->
		<in-memory-format>BINARY</in-memory-format>

		<!-- Number of backups. If 1 is set as the backup-count for example, then 
			all entries of the map will be copied to another JVM for fail-safety. 0 means 
			no backup. -->
		<backup-count>1</backup-count>
		<!-- Number of async backups. 0 means no backup. -->
		<async-backup-count>0</async-backup-count>
		<!-- Maximum number of seconds for each entry to stay in the map. Entries 
			that are older than <time-to-live-seconds> and not updated for <time-to-live-seconds> 
			will get automatically evicted from the map. Any integer between 0 and Integer.MAX_VALUE. 
			0 means infinite. Default is 0. -->
		<time-to-live-seconds>0</time-to-live-seconds>
		<!-- Maximum number of seconds for each entry to stay idle in the map. 
			Entries that are idle(not touched) for more than <max-idle-seconds> will 
			get automatically evicted from the map. Entry is touched if get, put or containsKey 
			is called. Any integer between 0 and Integer.MAX_VALUE. 0 means infinite. 
			Default is 0. -->
		<max-idle-seconds>0</max-idle-seconds>
		<!-- Valid values are: NONE (no eviction), LRU (Least Recently Used), LFU 
			(Least Frequently Used). NONE is the default. -->
		<eviction-policy>NONE</eviction-policy>
		<!-- Maximum size of the map. When max size is reached, map is evicted 
			based on the policy defined. Any integer between 0 and Integer.MAX_VALUE. 
			0 means Integer.MAX_VALUE. Default is 0. -->
		<max-size policy="PER_NODE">0</max-size>
		<!-- When max. size is reached, specified percentage of the map will be 
			evicted. Any integer between 0 and 100. If 25 is set for example, 25% of 
			the entries will get evicted. -->
		<eviction-percentage>25</eviction-percentage>
		<!-- Minimum time in milliseconds which should pass before checking if 
			a partition of this map is evictable or not. Default value is 100 millis. -->
		<min-eviction-check-millis>100</min-eviction-check-millis>
		<!-- While recovering from split-brain (network partitioning), map entries 
			in the small cluster will merge into the bigger cluster based on the policy 
			set here. When an entry merge into the cluster, there might an existing entry 
			with the same key already. Values of these entries might be different for 
			that same key. Which value should be set for the key? Conflict is resolved 
			by the policy set here. Default policy is PutIfAbsentMapMergePolicy There 
			are built-in merge policies such as com.hazelcast.map.merge.PassThroughMergePolicy; 
			entry will be overwritten if merging entry exists for the key. com.hazelcast.map.merge.PutIfAbsentMapMergePolicy 
			; entry will be added if the merging entry doesn't exist in the cluster. 
			com.hazelcast.map.merge.HigherHitsMapMergePolicy ; entry with the higher 
			hits wins. com.hazelcast.map.merge.LatestUpdateMapMergePolicy ; entry with 
			the latest update wins. -->
		<merge-policy>com.hazelcast.map.merge.PutIfAbsentMapMergePolicy</merge-policy>

	</map>
	<map name="dsm.catalog.group.offer.lock.write">
		<backup-count>1</backup-count>
		<time-to-live-seconds>0</time-to-live-seconds>
		<max-idle-seconds>0</max-idle-seconds>
		<eviction-policy>NONE</eviction-policy>
		<max-size>0</max-size>
		<eviction-percentage>0</eviction-percentage>
	</map>

	<map name="dsm.catalog.group.resource.lock.write">
		<backup-count>1</backup-count>
		<time-to-live-seconds>0</time-to-live-seconds>
		<max-idle-seconds>0</max-idle-seconds>
		<eviction-policy>NONE</eviction-policy>
		<max-size>0</max-size>
		<eviction-percentage>0</eviction-percentage>
	</map>

	<map name="dsm.catalog.manager.group.offers">
		<backup-count>1</backup-count>
		<time-to-live-seconds>0</time-to-live-seconds>
		<max-idle-seconds>0</max-idle-seconds>
		<eviction-policy>NONE</eviction-policy>
		<max-size>0</max-size>
		<eviction-percentage>0</eviction-percentage>
	</map>

	<map name="dsm.catalog.manager.group.resources">
		<backup-count>1</backup-count>
		<time-to-live-seconds>0</time-to-live-seconds>
		<max-idle-seconds>0</max-idle-seconds>
		<eviction-policy>NONE</eviction-policy>
		<max-size>0</max-size>
		<eviction-percentage>0</eviction-percentage>
	</map>

	<map name="dsm.catalog.offergroups.lock">
		<backup-count>1</backup-count>
		<time-to-live-seconds>0</time-to-live-seconds>
		<max-idle-seconds>0</max-idle-seconds>
		<eviction-policy>NONE</eviction-policy>
		<max-size>0</max-size>
		<eviction-percentage>0</eviction-percentage>
	</map>

	<map name="dsm.catalog.offergroups.mutex.daemon">
		<backup-count>1</backup-count>
		<time-to-live-seconds>0</time-to-live-seconds>
		<max-idle-seconds>0</max-idle-seconds>
		<eviction-policy>NONE</eviction-policy>
		<max-size>0</max-size>
		<eviction-percentage>0</eviction-percentage>
	</map>

	<map name="dsm.catalog.offers">
		<backup-count>1</backup-count>
		<time-to-live-seconds>0</time-to-live-seconds>
		<max-idle-seconds>0</max-idle-seconds>
		<eviction-policy>NONE</eviction-policy>
		<max-size>0</max-size>
		<eviction-percentage>0</eviction-percentage>
	</map>

	<map name="dsm.catalog.offers.lock">
		<backup-count>1</backup-count>
		<time-to-live-seconds>0</time-to-live-seconds>
		<max-idle-seconds>0</max-idle-seconds>
		<eviction-policy>NONE</eviction-policy>
		<max-size>0</max-size>
		<eviction-percentage>0</eviction-percentage>
	</map>

	<map name="dsm.catalog.offers.mutex.daemon">
		<backup-count>1</backup-count>
		<time-to-live-seconds>0</time-to-live-seconds>
		<max-idle-seconds>0</max-idle-seconds>
		<eviction-policy>NONE</eviction-policy>
		<max-size>0</max-size>
		<eviction-percentage>0</eviction-percentage>
	</map>

	<map name="dsm.catalog.offers.offer.lock.write">
		<backup-count>1</backup-count>
		<time-to-live-seconds>1200</time-to-live-seconds>
		<max-idle-seconds>0</max-idle-seconds>
		<eviction-policy>NONE</eviction-policy>
		<max-size>0</max-size>
		<eviction-percentage>0</eviction-percentage>
	</map>

	<map name="dsm.catalog.resourcegroups.lock">
		<backup-count>1</backup-count>
		<time-to-live-seconds>0</time-to-live-seconds>
		<max-idle-seconds>0</max-idle-seconds>
		<eviction-policy>NONE</eviction-policy>
		<max-size>0</max-size>
		<eviction-percentage>0</eviction-percentage>
	</map>

	<map name="dsm.catalog.services">
		<backup-count>1</backup-count>
		<time-to-live-seconds>0</time-to-live-seconds>
		<max-idle-seconds>0</max-idle-seconds>
		<eviction-policy>NONE</eviction-policy>
		<max-size>0</max-size>
		<eviction-percentage>0</eviction-percentage>
	</map>

	<map name="dsm.catalog.services.lock">
		<backup-count>1</backup-count>
		<time-to-live-seconds>0</time-to-live-seconds>
		<max-idle-seconds>0</max-idle-seconds>
		<eviction-policy>NONE</eviction-policy>
		<max-size>0</max-size>
		<eviction-percentage>0</eviction-percentage>
	</map>

	<map name="dsm.catalog.services.mutex.daemon">
		<backup-count>1</backup-count>
		<time-to-live-seconds>0</time-to-live-seconds>
		<max-idle-seconds>0</max-idle-seconds>
		<eviction-policy>NONE</eviction-policy>
		<max-size>0</max-size>
		<eviction-percentage>0</eviction-percentage>
	</map>

	<map name="dsm.catalog.services.service.lock.write">
		<backup-count>1</backup-count>
		<time-to-live-seconds>0</time-to-live-seconds>
		<max-idle-seconds>0</max-idle-seconds>
		<eviction-policy>NONE</eviction-policy>
		<max-size>0</max-size>
		<eviction-percentage>0</eviction-percentage>
	</map>

	<map name="dsm.catalog.resourcegroups.mutex.daemon">
		<backup-count>1</backup-count>
		<time-to-live-seconds>0</time-to-live-seconds>
		<max-idle-seconds>0</max-idle-seconds>
		<eviction-policy>NONE</eviction-policy>
		<max-size>0</max-size>
		<eviction-percentage>0</eviction-percentage>
	</map>
	<!--<serialization> <serializers> <serializer type-class="com.hazelcast.core.ISemaphore">com.ericsson.raso.sef.core.SampleObjectStreamSerializer</serializer> 
		</serializers> </serialization> -->

	<services enable-defaults="true" />
	
	<!-- Notification Manager hazelcast cluster configuration -->
<map name="dsm.catalog.notifications">
		<backup-count>1</backup-count>
		<time-to-live-seconds>0</time-to-live-seconds>
		<max-idle-seconds>0</max-idle-seconds>
		<eviction-policy>NONE</eviction-policy>
		<max-size>0</max-size>
		<eviction-percentage>0</eviction-percentage>
	</map>

	<map name="dsm.catalog.notifications.lock">
		<backup-count>1</backup-count>
		<time-to-live-seconds>0</time-to-live-seconds>
		<max-idle-seconds>0</max-idle-seconds>
		<eviction-policy>NONE</eviction-policy>
		<max-size>0</max-size>
		<eviction-percentage>0</eviction-percentage>
	</map>

	<map name="dsm.catalog.notifications.mutex.daemon">
		<backup-count>1</backup-count>
		<time-to-live-seconds>0</time-to-live-seconds>
		<max-idle-seconds>0</max-idle-seconds>
		<eviction-policy>NONE</eviction-policy>
		<max-size>0</max-size>
		<eviction-percentage>0</eviction-percentage>
	</map>

	<map name="dsm.catalog.notifications.notification.lock.write">
		<backup-count>1</backup-count>
		<time-to-live-seconds>1200</time-to-live-seconds>
		<max-idle-seconds>0</max-idle-seconds>
		<eviction-policy>NONE</eviction-policy>
		<max-size>0</max-size>
		<eviction-percentage>0</eviction-percentage>
	</map>
</hazelcast>

<!-- <hazelcast> <group> <name>sef</name> <password>sef</password> </group> 
	<network> <port auto-increment="true">5701</port> <join> <multicast enabled="false"> 
	<multicast-group>224.2.2.3</multicast-group> <multicast-port>54327</multicast-port> 
	</multicast> <tcp-ip enabled="true"> <interface>127.0.0.1</interface> </tcp-ip> 
	</join> </network> <map name="sla.mgmt.store"> <backup-count>1</backup-count> 
	<time-to-live-seconds>1200</time-to-live-seconds> <max-idle-seconds>0</max-idle-seconds> 
	<eviction-policy>NONE</eviction-policy> <max-size>0</max-size> <eviction-percentage>25</eviction-percentage> 
	</map> </hazelcast> -->




